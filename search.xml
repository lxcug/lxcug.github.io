<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>The application of deep learning in creating acoustic invisible cloak</title>
    <url>/2022/02/07/The%20application%20of%20deep%20learning%20in%20creating%20acoustic%20invisible%20cloak/</url>
    <content><![CDATA[<h1 id="The-application-of-deep-learning-in-creating-acoustic-invisible-cloak"><a href="#The-application-of-deep-learning-in-creating-acoustic-invisible-cloak" class="headerlink" title="The application of deep learning in creating acoustic invisible cloak"></a>The application of deep learning in creating acoustic invisible cloak</h1><h2 id="1-data-set"><a href="#1-data-set" class="headerlink" title="1. data set"></a>1. data set</h2><p><img src="https://s2.loli.net/2022/02/22/KV4W6yGnIATUrBx.png" alt="image-20220209183117130"></p>
<script type="math/tex; mode=display">
input\ data:\ 一个二维4层材料的参数\ D = [a_1,\ a_2,\ a_3,\ a_4,\ \kappa_1, \ \kappa_2, \ \kappa_3,\ \kappa_4]\\
其中a_i和k_i为第i层材料的半径和弹性模量\\
output\ data:\ R = [r_1,\cdots,\ r_{100}]\\
r_1-r_{100}覆盖了标准化的频率空间,0 \le k_0a \le \pi,其中k_0=\frac{2\pi}{\lambda}为声波数\\
量化隐身性能\ r_i = \frac{\sigma_{cloak}}{\sigma_{object}},\ r_i为该normalized频率下的量化隐身性能\\
r_i通过转移矩阵法TMM(Transfer\ Matrix\ Method)计算得到</script><h2 id="2-模型设计"><a href="#2-模型设计" class="headerlink" title="2. 模型设计"></a>2. 模型设计</h2><p><img src="https://s2.loli.net/2022/02/22/bDQq5xBg72SoF1u.png" alt="image-20220209210248982"></p>
<p><img src="https://s2.loli.net/2022/02/22/PNESK9oiJjYMHhQ.png" alt="image-20220209192014276"></p>
<h3 id="Forward-modeling-network-decoder"><a href="#Forward-modeling-network-decoder" class="headerlink" title="Forward-modeling network(decoder)"></a>Forward-modeling network(decoder)</h3><p>decoder为4层的全连接网络，每层的节点数分别为500、500、400、300</p>
<h3 id="Hyperparameter"><a href="#Hyperparameter" class="headerlink" title="Hyperparameter"></a>Hyperparameter</h3><p><img src="https://s2.loli.net/2022/02/22/fVSKE6NwnQrieaO.png" alt="image-20220209201223752"></p>
<h2 id="3-传输矩阵法TMM"><a href="#3-传输矩阵法TMM" class="headerlink" title="3. 传输矩阵法TMM"></a>3. 传输矩阵法TMM</h2><p>传输矩阵法用于计算材料的透射率</p>
<script type="math/tex; mode=display">
\zeta^{sca}_n = \frac{T_{11}}{T_{21}}\\
\sigma_{cloak} = \frac{4}{k_0}\cdot\sum_0^n |\zeta^{sca}_n|^2</script>]]></content>
  </entry>
  <entry>
    <title>c++知识重构</title>
    <url>/2022/02/10/c++%E7%9F%A5%E8%AF%86%E9%87%8D%E6%9E%84/</url>
    <content><![CDATA[<h1 id="c-知识重构"><a href="#c-知识重构" class="headerlink" title="c++知识重构"></a>c++知识重构</h1><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><h3 id="临时变量不能赋值给非const引用"><a href="#临时变量不能赋值给非const引用" class="headerlink" title="临时变量不能赋值给非const引用"></a>临时变量不能赋值给非const引用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">string</span> &amp;str)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">&quot;hello&quot;</span>);  <span class="comment">// 错误，&quot;hello&quot;是临时变量，而print的参数类型是string&amp;，临时变量不能赋值给non-const引用</span></span><br></pre></td></tr></table></figure>
<p>原因：编译器认为非const引用参数会被修改，并且以后还会被用到，而临时变量会随时被释放掉因此不能将临时变量赋值给非const引用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> &amp;a = <span class="number">7</span>;  <span class="comment">// 同理这个也是错的，7是临时变量</span></span><br></pre></td></tr></table></figure>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串结束符"><a href="#字符串结束符" class="headerlink" title="字符串结束符"></a>字符串结束符</h3><p>字符串是以空字符’\0’(斜杠0)为结尾的字符串数组</p>
<h4 id="0、’-0’、’0’的机器码"><a href="#0、’-0’、’0’的机器码" class="headerlink" title="0、’\0’、’0’的机器码"></a>0、’\0’、’0’的机器码</h4><ul>
<li>0: 0x00</li>
<li>‘\0’: 0x00</li>
<li>‘0’: 0x30</li>
</ul>
<p>所以socket编程中buf[strLen] = 0;截断了字符串</p>
<h3 id="char-和char"><a href="#char-和char" class="headerlink" title="char []和char *"></a>char []和char *</h3><p><img src="https://s2.loli.net/2022/02/22/m7tNbVMO9Hw6yIl.png" alt="image-20220118141955199"></p>
<p><img src="D:\2 download\1 pics\IMG_091-16455377882262.PNG" alt="IMG_091-16455377882262"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> strArray[] = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *strPtr = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"><span class="comment">// strArray的地址固定，所以strArray不可变，但是strArray[i]可变</span></span><br><span class="line"><span class="comment">// strPtr是指针，指向对象可变，即strPtr可变，但是strPtr[i]不可变，因为&quot;Hello, world!&quot;是字符串常量存储在静态存储区，如果把strPtr指向strArray，则可以改变strPtr[i]</span></span><br></pre></td></tr></table></figure>
<h3 id="strcpy函数"><a href="#strcpy函数" class="headerlink" title="strcpy函数"></a>strcpy函数</h3><p>函数原型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * __cdecl <span class="title">strcpy</span><span class="params">(<span class="keyword">char</span> * __restrict__ _Dest,<span class="keyword">const</span> <span class="keyword">char</span> * __restrict__ _Source)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>((*(_Dest++)=*(_Source++))!=<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> _Dest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// __restrict__表示变量只能通过该指针进行修改</span></span><br></pre></td></tr></table></figure>
<p>实参_Dest必须是char []类型，因为strcpy会逐个修改char，实参_Source可以是char *或者char []因为只需要访问Source[i]不用修改</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s1[MAX_SIZE];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *s2 = <span class="string">&quot;Hello, world&quot;</span>; <span class="comment">// 或者char s2[] = &quot;Hello, world&quot;;</span></span><br><span class="line"><span class="built_in">strcpy</span>(s1, s2);</span><br></pre></td></tr></table></figure>
<p>如果想对char *类型进行复制，show the demo</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *s1 = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">char</span> s2[] = <span class="string">&quot;Hello, world&quot;</span>;</span><br><span class="line">s1 = s2;</span><br></pre></td></tr></table></figure>
<h3 id="strcat函数"><a href="#strcat函数" class="headerlink" title="strcat函数"></a>strcat函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">strcat</span><span class="params">(<span class="keyword">char</span> * __restrict__ _Dest,<span class="keyword">const</span> <span class="keyword">char</span> * __restrict__ _Source)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_Dest == <span class="literal">NULL</span> || _Source == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> _Dest;</span><br><span class="line">    <span class="keyword">char</span> *p = _Dest;</span><br><span class="line">    <span class="keyword">while</span>(*p != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        p++;</span><br><span class="line">    <span class="keyword">while</span>(*_Source != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        *p++ = *_Source++;</span><br><span class="line">    *p = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> _Dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>strcat函数中也对_Dest[i]进行了修改所以实参_Dest类型也要是char []</p>
<h3 id="字符串常量赋值给const-char"><a href="#字符串常量赋值给const-char" class="headerlink" title="字符串常量赋值给const char *"></a>字符串常量赋值给const char *</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> *s2 = <span class="string">&quot;nihao&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> *p = s1;</span><br><span class="line">    p[<span class="number">4</span>] = s2[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p[4] &#x3D; s2[1]该句错误，因为s1指向的是静态区变量，不能被修改，而p也指向该对象，如果把s1改成char s1[]则可以修改</span><br><span class="line">因此c++11标准中，对字符串常量赋值必须用const char *防止出现该类错误</span><br></pre></td></tr></table></figure>
<h2 id="c-移动语义"><a href="#c-移动语义" class="headerlink" title="c++移动语义"></a>c++移动语义</h2><h3 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h3><ul>
<li>左值有地址和值</li>
<li>右值只有值</li>
</ul>
<p>不能单纯的用等式在左边或者右边来判断是lvalue还是rvalue</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;  <span class="comment">// a是lvalue, 10是rvalue</span></span><br><span class="line"><span class="built_in">string</span> temp = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> s = temp;  <span class="comment">// s和temp都是rvalue</span></span><br></pre></td></tr></table></figure>
<h3 id="移动的必要性"><a href="#移动的必要性" class="headerlink" title="移动的必要性"></a>移动的必要性</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    String(<span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Created!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        m_size = <span class="built_in">strlen</span>(<span class="built_in">string</span>);</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="keyword">char</span>[m_size];</span><br><span class="line">        <span class="built_in">memcpy</span>(m_data, <span class="built_in">string</span>, m_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String(<span class="keyword">const</span> String &amp;other) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Copied!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        m_size = other.m_size;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="keyword">char</span>[m_size];</span><br><span class="line">        <span class="built_in">memcpy</span>(m_data, other.m_data, m_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~String() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Destoryed!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">delete</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> *m_data;</span><br><span class="line">    <span class="keyword">int</span> m_size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entity</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Entity(<span class="keyword">const</span> String &amp;name): m_name(name) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    String m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Entity <span class="title">sth</span><span class="params">(<span class="string">&quot;sth&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://s2.loli.net/2022/02/22/tFOPC3GjuoiDpyK.png" alt="image-20220220150142780" style="zoom:67%;" /></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">在创建Entity实例时调用了两次构造函数，第一次将char *赋值给String实例，第二次将String实例复制给m_name，第二次复制完全是没有必要的，可以直接将String实例移动给m_name</span><br></pre></td></tr></table></figure>
<p><strong>利用std::move</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    String(<span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Created!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        m_size = <span class="built_in">strlen</span>(<span class="built_in">string</span>);</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="keyword">char</span>[m_size];</span><br><span class="line">        <span class="built_in">memcpy</span>(m_data, <span class="built_in">string</span>, m_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String(<span class="keyword">const</span> String &amp;other) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Copied!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        m_size = other.m_size;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="keyword">char</span>[m_size];</span><br><span class="line">        <span class="built_in">memcpy</span>(m_data, other.m_data, m_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &amp;&amp;为右值引用</span></span><br><span class="line">    String(String &amp;&amp;other) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Moved!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        m_size = other.m_size;</span><br><span class="line">        m_data = other.m_data;</span><br><span class="line">        <span class="comment">// 原String实例的数据被move，所以m_data变为空指针</span></span><br><span class="line">        other.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        other.m_size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~String() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Destoryed!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">delete</span> m_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> *m_data;</span><br><span class="line">    <span class="keyword">int</span> m_size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entity</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Entity(<span class="keyword">const</span> String &amp;name): m_name(name) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Entity(String &amp;&amp;name): m_name(<span class="built_in">std</span>::move(name)) &#123;&#125;</span><br><span class="line">    <span class="comment">// std::move和(String &amp;&amp;)做了同样的事，强制使用右值引用构造函数</span></span><br><span class="line">    <span class="comment">// Entity(String &amp;&amp;name): m_name((String &amp;&amp;)name) &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    String m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Entity <span class="title">sth</span><span class="params">(<span class="string">&quot;sth&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://s2.loli.net/2022/02/22/CvQV6ihYu8HjR2S.png" alt="image-20220220154742564"></p>
<h3 id="std-move"><a href="#std-move" class="headerlink" title="std::move"></a>std::move</h3><p>当我们需要将对象移动到另一个对象时用std::move</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">string</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">// 如果我们需要移动对象</span></span><br><span class="line"><span class="function">String <span class="title">dest</span><span class="params">(<span class="built_in">std</span>::move(<span class="built_in">string</span>))</span></span>;</span><br></pre></td></tr></table></figure>
<p>std::move将String实例string转为一个临时对象</p>
<h3 id="移动赋值运算符"><a href="#移动赋值运算符" class="headerlink" title="移动赋值运算符"></a>移动赋值运算符</h3><p><strong>移动赋值运算符与拷贝赋值运算符 的关系和 移动构造函数与拷贝构造函数 的关系一样</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    String(<span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Created!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        m_size = <span class="built_in">strlen</span>(<span class="built_in">string</span>);</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="keyword">char</span>[m_size];</span><br><span class="line">        <span class="built_in">memcpy</span>(m_data, <span class="built_in">string</span>, m_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String(<span class="keyword">const</span> String &amp;other) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        m_size = other.m_size;</span><br><span class="line">        m_data = <span class="keyword">new</span> <span class="keyword">char</span>[m_size];</span><br><span class="line">        <span class="built_in">memcpy</span>(m_data, other.m_data, m_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &amp;&amp;为右值引用</span></span><br><span class="line">    String(String&amp;&amp; other)  <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;移动构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        m_size = other.m_size;</span><br><span class="line">        m_data = other.m_data;</span><br><span class="line">        <span class="comment">// 原String实例的数据被move，所以m_data变为空指针</span></span><br><span class="line">        other.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">        other.m_size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp; other) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;拷贝赋值函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;other) &#123;</span><br><span class="line">            m_size = other.m_size;</span><br><span class="line">            m_data = <span class="keyword">new</span> <span class="keyword">char</span>[m_size];</span><br><span class="line">            <span class="built_in">memcpy</span>(m_data, other.m_data, m_size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String&amp; <span class="keyword">operator</span>=(String&amp;&amp; other)  <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;移动赋值函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;other) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] m_data;  <span class="comment">// 删除自己原有数据</span></span><br><span class="line">            m_size = other.m_size;</span><br><span class="line">            m_data = other.m_data;</span><br><span class="line">            other.m_data = <span class="literal">nullptr</span>;</span><br><span class="line">            other.m_size = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~String() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Destoryed!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">delete</span>[] m_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> *m_data;</span><br><span class="line">    <span class="keyword">int</span> m_size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String <span class="built_in">string</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    String dest = <span class="built_in">std</span>::move(<span class="built_in">string</span>);</span><br><span class="line">    dest = <span class="built_in">std</span>::move(<span class="built_in">string</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="https://s2.loli.net/2022/02/22/N9tLzXy4Ku1DhcF.png" alt="image-20220220165510875"></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">需要注意的是</span><br><span class="line">String dest = std::move(String)调用了移动构造函数，因为新建了一个实例dest并且使用了一个临时指std::move(string)</span><br><span class="line">而dest = std::move(string);用到了移动赋值函数</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>python数据可视化</title>
    <url>/2021/03/17/python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<h1 id="1-numpy基础"><a href="#1-numpy基础" class="headerlink" title="1.numpy基础"></a>1.numpy基础</h1><h2 id="创建array"><a href="#创建array" class="headerlink" title="创建array"></a>创建array</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.array([1, 2, 3])</span><br><span class="line">np.arange(start, end, num)</span><br><span class="line">np.linspace(start, end, num)</span><br><span class="line"></span><br><span class="line">np.repeat([1, 2], 2)</span><br><span class="line">-&gt; [1, 1, 2, 2]</span><br><span class="line"></span><br><span class="line">np.tile([1, 2], 2]</span><br><span class="line">-&gt; [1, 2, 1, 2]</span><br><span class="line"></span><br><span class="line">np.ones(2, 3)</span><br><span class="line">-&gt; [1, 1, 1],</span><br><span class="line">   [1, 1, 1]</span><br><span class="line">   </span><br><span class="line">np.zeros(2, 3)</span><br><span class="line"></span><br><span class="line">np.random.random(n)  # 创建n个0-1之间的随机数</span><br><span class="line">np.random.randn(2, 3)  # 创建2*3的标准正态分布array</span><br><span class="line"></span><br><span class="line">np.random.normal(loc&#x3D;0, scale&#x3D;1, size&#x3D;3)  # 创建均值为0，标准差为1的正态分布</span><br><span class="line">-&gt; [1.28168084, -0.94480183,  0.30349834]</span><br></pre></td></tr></table></figure>
<h2 id="数组的索引与变换"><a href="#数组的索引与变换" class="headerlink" title="数组的索引与变换"></a>数组的索引与变换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 索引</span><br><span class="line">a &#x3D; np.arange(10)</span><br><span class="line">-&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"></span><br><span class="line">a[:5]</span><br><span class="line">-&gt; [0, 1, 2, 3, 4]</span><br><span class="line"></span><br><span class="line"># 变换</span><br><span class="line">a.reshape(2, 5)</span><br><span class="line">-&gt; [0, 1, 2, 3, 4],</span><br><span class="line">   [5, 6, 7, 8, 9]]</span><br><span class="line">   </span><br><span class="line">a.reshape(2, -1)  # -1表示根据数组长度和行计算列数</span><br><span class="line">-&gt; [0, 1, 2, 3, 4],</span><br><span class="line">   [5, 6, 7, 8, 9]]</span><br><span class="line"></span><br><span class="line">a.flatten()  # a复制传参然后降为1维</span><br><span class="line">-&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"></span><br><span class="line">a.ravel()  # 直接对a进行修改</span><br><span class="line">-&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"></span><br><span class="line"># 排序</span><br><span class="line">b &#x3D; np.array(([1, 4 ,3],</span><br><span class="line">              [4, 5, 1],</span><br><span class="line">              [2, 3, 2]))</span><br><span class="line">-&gt; [[1, 4, 3],</span><br><span class="line">    [4, 5, 1],</span><br><span class="line">    [2, 3, 2]]</span><br><span class="line"></span><br><span class="line">b.sort(axis&#x3D;0)  # 跨行排序</span><br><span class="line">-&gt; [[1, 3, 1],</span><br><span class="line">    [2, 4, 2],</span><br><span class="line">    [4, 5, 3]]</span><br><span class="line">    </span><br><span class="line">b.sort(axis&#x3D;1)  # 跨列排序</span><br><span class="line">-&gt; [[1, 3, 4],</span><br><span class="line">    [1, 4, 5],</span><br><span class="line">    [2, 2, 3]]</span><br></pre></td></tr></table></figure>
<h2 id="数组的组合"><a href="#数组的组合" class="headerlink" title="数组的组合"></a>数组的组合</h2><p>数组组合分为</p>
<ul>
<li>hstack 水平组合</li>
<li>vstack 垂直组合</li>
<li>dstack 深度组合</li>
<li>colume_stack 列组合</li>
<li>row_stack 行组合</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; np.arange(6).reshape(3, 2)</span><br><span class="line">-&gt; [[0, 1],</span><br><span class="line">    [2, 3],</span><br><span class="line">    [4, 5]]</span><br><span class="line">b &#x3D; np.arange(9).reshape(3, 3)</span><br><span class="line">-&gt; [[0, 1, 2],</span><br><span class="line">    [3, 4 ,5],</span><br><span class="line">    [6, 7, 8]]</span><br><span class="line">c &#x3D; np.arange(6).reshape(2, 3)</span><br><span class="line">-&gt; [[0, 1, 2],</span><br><span class="line">    [3, 4, 5]]</span><br><span class="line">    </span><br><span class="line"># 水平组合</span><br><span class="line">np.hstack(a, b) &#x3D;&#x3D; np.concatenate((a, b), axis&#x3D;1) &#x3D;&#x3D; np.append(a, b, axis&#x3D;1)</span><br><span class="line">-&gt; [[0, 1, 0, 1, 2],</span><br><span class="line">    [2, 3, 3, 4, 5],</span><br><span class="line">    [4, 5, 6, 7, 8]]</span><br><span class="line">    </span><br><span class="line"># 垂直组合    </span><br><span class="line"> np.vstack((b, c)) &#x3D;&#x3D; np.concatenate((b, c), axis&#x3D;0) &#x3D;&#x3D; np.append(b, c, axis&#x3D;0)</span><br><span class="line"> -&gt; [[0, 1, 2],</span><br><span class="line">     [3, 4, 5],</span><br><span class="line">     [6, 7, 8],</span><br><span class="line">     [0, 1, 2],</span><br><span class="line">     [3, 4, 5]]</span><br></pre></td></tr></table></figure>
<h2 id="数组的统计函数"><a href="#数组的统计函数" class="headerlink" title="数组的统计函数"></a>数组的统计函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ary &#x3D; np.arange(6)</span><br><span class="line">-&gt; [0, 1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">np.mean(ary)  # 平均值</span><br><span class="line">np.average(ary)  # 加权平均值</span><br><span class="line">np.var(ary)  # 方差</span><br><span class="line">np.std(ary)  # 标准差</span><br><span class="line">np.min(ary)</span><br><span class="line">np.max(ary)</span><br><span class="line">np.ptp(ary)  # 全距 最大值和最小值的差</span><br><span class="line">np.percentile(ary, 90)  # 计算百分位在统计对象中的值</span><br><span class="line">-&gt; 4.5</span><br><span class="line">np.median(ary)  # 中位数</span><br><span class="line">np.sum  # 和</span><br></pre></td></tr></table></figure>
<h1 id="2-pandas基础"><a href="#2-pandas基础" class="headerlink" title="2.pandas基础"></a>2.pandas基础</h1><h2 id="pandas数据类型"><a href="#pandas数据类型" class="headerlink" title="pandas数据类型"></a>pandas数据类型</h2><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p>Series是含有索引的一维数组，包含index和value</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s1 &#x3D; pd.Series([1, 3, 2, 4])</span><br><span class="line">-&gt; 0    1</span><br><span class="line">   1    3</span><br><span class="line">   2    2</span><br><span class="line">   3    4</span><br><span class="line">   dtype: int64</span><br><span class="line"></span><br><span class="line">s2 &#x3D; pd.Series([1, 3, 2, 4], index&#x3D;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])</span><br><span class="line">-&gt; a    1</span><br><span class="line">   b    3</span><br><span class="line">   c    2</span><br><span class="line">   d    4</span><br><span class="line">   dtype: int64</span><br></pre></td></tr></table></figure>
<h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p>DataFrame类似于Excel表格，包含index和多列数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用list创建DataFrame</span><br><span class="line">df1 &#x3D; pd.DataFrame([[&#39;a&#39;, 1, 2], [&#39;b&#39;, 2, 5], [&#39;c&#39;, 3, 3]], columns&#x3D;[&#39;x&#39;, &#39;y&#39;, &#39;z&#39;])</span><br><span class="line">-&gt;  x y z</span><br><span class="line">  0 a 1 2</span><br><span class="line">  1 b 2 5</span><br><span class="line">  2 c 3 3</span><br><span class="line"></span><br><span class="line"># 使用ndarray创建DataFrame</span><br><span class="line">df2 &#x3D; pd.DataFrame(np.ones((2, 3)), columns&#x3D;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</span><br><span class="line">-&gt;    a    b    c</span><br><span class="line">  0  1.0  1.0  1.0</span><br><span class="line">  1  1.0  1.0  1.0</span><br><span class="line"></span><br><span class="line"># 使用字典创建DataFrame</span><br><span class="line">df3 &#x3D; pd.DataFrame(&#123;&#39;x&#39;: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], &#39;y&#39;: range(1, 4), &#39;z&#39;: [3, 5, 2]&#125;)</span><br><span class="line">-&gt;  x y z</span><br><span class="line">  0 a 1 3</span><br><span class="line">  1 b 2 5</span><br><span class="line">  2 c 3 2</span><br><span class="line">  </span><br><span class="line"># DataFrame数据的选取</span><br><span class="line"># 选取一列，取出的数据类型为Series</span><br><span class="line">s &#x3D; df3[y]</span><br><span class="line">-&gt; 0 1</span><br><span class="line">   1 2</span><br><span class="line">   2 3</span><br><span class="line">   Name: y, dtype: int64</span><br><span class="line">type(s)</span><br><span class="line">-&gt; pandas.core.series.Series</span><br><span class="line"></span><br><span class="line"># 使用loc函数选取数据</span><br><span class="line">df3.loc[:2, &#39;y&#39;]</span><br><span class="line">-&gt; 0 1</span><br><span class="line">   1 2</span><br><span class="line">   Name: y, dtype: int64</span><br><span class="line"></span><br><span class="line"># 使用iloc函数(index loc)选取数据</span><br><span class="line">df3.iloc[:2, 1]</span><br><span class="line">-&gt; 0 1</span><br><span class="line">   1 2</span><br><span class="line">   Name: y, dtype: int64</span><br><span class="line"></span><br><span class="line"># 筛选数据</span><br><span class="line">df3[df3[&#39;z&#39;] &gt;&#x3D; 3]</span><br><span class="line">-&gt;  x y z</span><br><span class="line">  0 a 1 3</span><br><span class="line">  1 b 2 5</span><br><span class="line"></span><br><span class="line">df3[(df3[&#39;z&#39;] &gt;&#x3D;3) &amp; (df3[&#39;z&#39;] &lt;&#x3D; 4)]</span><br><span class="line">-&gt;  x y z</span><br><span class="line">  0 a 1 3</span><br><span class="line"></span><br><span class="line"># 获取DataFrame的行列数，返回一个元组第一个元素是行，第二个</span><br><span class="line">df3.shape</span><br><span class="line">-&gt; (3, 3)</span><br><span class="line"></span><br><span class="line"># 获取列名</span><br><span class="line">df3.columns</span><br><span class="line"></span><br><span class="line"># 获取行名</span><br><span class="line">df3.index</span><br><span class="line"></span><br><span class="line"># 列重命名</span><br><span class="line">df3.columns &#x3D; [1, 2, 3]</span><br><span class="line">-&gt;  1 2 3</span><br><span class="line">  0 a 1 3</span><br><span class="line">  1 b 2 5</span><br><span class="line">  2 c 3 2</span><br><span class="line"></span><br><span class="line">df3.rename(columns&#x3D;&#123;&#39;x&#39; : &#39;X&#39;&#125;, inplace&#x3D;True)  # 不添加inplace&#x3D;True会增加新列，不修改列名</span><br><span class="line">-&gt;  X y z</span><br><span class="line">  0 a 1 3</span><br><span class="line">  1 b 2 5</span><br><span class="line">  2 c 3 2</span><br><span class="line"></span><br><span class="line">df.head(n)  # 查看前n行数据</span><br><span class="line">df.tail(n)  # 查看后n行数据</span><br></pre></td></tr></table></figure>
<h3 id="Categorical"><a href="#Categorical" class="headerlink" title="Categorical"></a>Categorical</h3><p>Categorical(分类)可以用于承载基于整数的类别展示或编码的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 分类数据的创建</span><br><span class="line">cut1 &#x3D; pd.Categorical([&#39;Fair&#39;, &#39;Good&#39;, &#39;Very Good&#39;, &#39;Premium&#39;, &#39;Ideal&#39;])</span><br><span class="line">-&gt; [Fair, Good, Very Good, Premium, Ideal]</span><br><span class="line">   Categories (5, object): [Fair, Good, Premium, Very Good, Ideal]</span><br><span class="line"></span><br><span class="line"># Series转换为Categorical</span><br><span class="line">cut2 &#x3D; pd.Categorical([&#39;Good&#39;, &#39;Fair&#39;, &#39;Very Good&#39;, &#39;Premium&#39;, &#39;Ideal&#39;])</span><br><span class="line">cut.astype(&#39;category&#39;)</span><br><span class="line">-&gt; [Good, Fair, Very Good, Premium, Ideal]</span><br><span class="line">   Categories (5, object): [Fair, Good, Ideal, Premium, Very Good]</span><br><span class="line"></span><br><span class="line">cut1.codes  # 获取编码</span><br><span class="line">-&gt; array([0, 1, 4, 3, 2], dtype&#x3D;int8)</span><br><span class="line"></span><br><span class="line">cut1.categories  # 获取类别</span><br><span class="line">-&gt; Index([&#39;Fair&#39;, &#39;Good&#39;, &#39;Ideal&#39;, &#39;Premium&#39;, &#39;Very Good&#39;], dtype&#x3D;&#39;object&#39;)</span><br></pre></td></tr></table></figure>
<h2 id="DataFrame的拼接"><a href="#DataFrame的拼接" class="headerlink" title="DataFrame的拼接"></a>DataFrame的拼接</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = pd.DataFrame(<span class="built_in">dict</span>(x=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], y=<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>)))</span><br><span class="line">df2 = pd.DataFrame(<span class="built_in">dict</span>(z=[<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;H&#x27;</span>], g=[<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>]))</span><br><span class="line">df3 = pd.DataFrame(<span class="built_in">dict</span>(x=[<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], y=[<span class="number">2</span>, <span class="number">5</span>]))</span><br><span class="line"></span><br><span class="line">df_combined = pd.concat([df1, df2], axis=<span class="number">1</span>)</span><br><span class="line">-&gt;   x y z g</span><br><span class="line">   <span class="number">0</span> a <span class="number">1</span> B <span class="number">2</span></span><br><span class="line">   <span class="number">1</span> b <span class="number">2</span> D <span class="number">5</span></span><br><span class="line">   <span class="number">2</span> c <span class="number">3</span> H <span class="number">3</span></span><br><span class="line"></span><br><span class="line">df_append = df1.append(df3)</span><br><span class="line">-&gt;   x  y</span><br><span class="line">  <span class="number">0</span>  a  <span class="number">1</span></span><br><span class="line">  <span class="number">1</span>  b  <span class="number">2</span></span><br><span class="line">  <span class="number">2</span>  c  <span class="number">3</span></span><br><span class="line">  <span class="number">0</span>  g  <span class="number">2</span></span><br><span class="line">  <span class="number">1</span>  d  <span class="number">5</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 删除列</span></span><br><span class="line">df3.drop(columns=<span class="string">&#x27;x&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">-&gt;   y</span><br><span class="line">  <span class="number">0</span>  <span class="number">2</span></span><br><span class="line">  <span class="number">1</span>  <span class="number">5</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 删除行</span></span><br><span class="line">df3.drop(labels=<span class="number">0</span>, axis=<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">-&gt;   y</span><br><span class="line">  <span class="number">1</span>  <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表格的融合</span></span><br><span class="line">df1 = pd.DataFrame(<span class="built_in">dict</span>(x=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], y=<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>)))</span><br><span class="line">df2 = pd.DataFrame(<span class="built_in">dict</span>(x=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], z=[<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>]))</span><br><span class="line">df3 = pd.DataFrame(<span class="built_in">dict</span>(g=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], z=[<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>]))</span><br><span class="line">df1, df2, df3</span><br><span class="line">-&gt; (  x  y</span><br><span class="line">   <span class="number">0</span>  a  <span class="number">1</span></span><br><span class="line">   <span class="number">1</span>  b  <span class="number">2</span></span><br><span class="line">   <span class="number">2</span>  c  <span class="number">3</span>,</span><br><span class="line">      x  z</span><br><span class="line">   <span class="number">0</span>  a  <span class="number">2</span></span><br><span class="line">   <span class="number">1</span>  b  <span class="number">4</span></span><br><span class="line">   <span class="number">2</span>  d  <span class="number">3</span>,</span><br><span class="line">      g  z</span><br><span class="line">   <span class="number">0</span>  a  <span class="number">3</span></span><br><span class="line">   <span class="number">1</span>  b  <span class="number">5</span></span><br><span class="line">   <span class="number">2</span>  c  <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># how=&#x27;left&#x27;表示以左DataFrame的index为准，on=&#x27;x&#x27;表示以x列index融合,融合后不存在的值用NaN表示</span></span><br><span class="line">df_merge1 = pd.merge(left=df1, right=df2, how=<span class="string">&#x27;left&#x27;</span>, on=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">-&gt;   x  y   z</span><br><span class="line">  <span class="number">0</span>  a  <span class="number">1</span>  <span class="number">2.0</span></span><br><span class="line">  <span class="number">1</span>  b  <span class="number">2</span>  <span class="number">4.0</span></span><br><span class="line">  <span class="number">2</span>  c  <span class="number">3</span>  NaN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存公共信息</span></span><br><span class="line">df_merge2 = pd.merge(left=df1, right=df2, how=<span class="string">&#x27;inner&#x27;</span>, on=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">-&gt;  x  y  z</span><br><span class="line">  <span class="number">0</span> a  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line">  <span class="number">1</span> b  <span class="number">2</span>  <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存所有信息</span></span><br><span class="line">df_merge3 = pd.merge(left=df1, right=df2, how=<span class="string">&#x27;outer&#x27;</span>, on=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">-&gt;  x   y   z</span><br><span class="line">  <span class="number">0</span> a  <span class="number">1.0</span>  <span class="number">2.0</span></span><br><span class="line">  <span class="number">1</span> b  <span class="number">2.0</span>  <span class="number">4.0</span></span><br><span class="line">  <span class="number">2</span> c  <span class="number">3.0</span>  NaN</span><br><span class="line">  <span class="number">3</span> d  NaN  <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据不同列名合并</span></span><br><span class="line">df_merge4 = pd.merge(left=df1, right=df3, left_on=<span class="string">&#x27;x&#x27;</span>, right_on=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">-&gt;   x  y  g  z</span><br><span class="line">  <span class="number">0</span>  a  <span class="number">1</span>  a  <span class="number">3</span></span><br><span class="line">  <span class="number">1</span>  b  <span class="number">2</span>  b  <span class="number">5</span></span><br><span class="line">  <span class="number">2</span>  c  <span class="number">3</span>  c  <span class="number">6</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>堆排序</title>
    <url>/2021/08/08/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大堆</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">heap</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createHeap</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span>;  <span class="comment">// 构建最大堆</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(<span class="keyword">int</span> root)</span></span>;  <span class="comment">// 建堆的辅助函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">(<span class="keyword">int</span> k)</span></span>;  <span class="comment">// 向堆内添加元素的辅助函数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMaxElem</span><span class="params">()</span></span>;  <span class="comment">// 取出最大元素并保证仍为最大堆</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertElem</span><span class="params">(<span class="keyword">int</span> elem)</span></span>;  <span class="comment">// 插入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">()</span></span>;  <span class="comment">// 输出堆排序结果</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> numToPrint)</span></span>;  <span class="comment">// 参数numToPrint控制输出元素个数</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">getVector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap::createHeap</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">    a.assign(nums.begin(), nums.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = nums.size()/<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)  <span class="comment">// 从下到上调整</span></span><br><span class="line">        shiftDown(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap::shiftDown</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = a[root];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>*root+<span class="number">1</span>; i &lt; a.size(); i = <span class="number">2</span>*i+<span class="number">1</span>) &#123;  <span class="comment">// 如果此级调整还需要循环调整下一级</span></span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">1</span> &lt; a.size())  <span class="comment">// 找到左右子树中较大值</span></span><br><span class="line">            i = a[i] &gt; a[i+<span class="number">1</span>] ? i : i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt;= a[i])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            a[root] = a[i];  <span class="comment">// 交换一次，如果用swap需要交换3次</span></span><br><span class="line">            root = i;  <span class="comment">// 上一级调整可能导致下一级的堆，继续对下一级进行调整</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a[root] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap::shiftUp</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = a[k];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = (k<span class="number">-1</span>)/<span class="number">2</span>; i &gt;= <span class="number">0</span>; i = (i<span class="number">-1</span>)/<span class="number">2</span>) &#123;  <span class="comment">// 注意i=0时，i = (i-1)/2 = int(-0.5) = 0</span></span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; temp) &#123;</span><br><span class="line">            a[k] = a[i];</span><br><span class="line">            k = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)  <span class="comment">// i = 0时调整完break避免进入死循环</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[k] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">heap::getMaxElem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = a[<span class="number">0</span>];</span><br><span class="line">    swap(a[<span class="number">0</span>], a[a.size()<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">this</span>-&gt;a.pop_back();</span><br><span class="line">    shiftDown(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap::insertElem</span><span class="params">(<span class="keyword">int</span> elem)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;a.push_back(elem);</span><br><span class="line">    shiftUp(a.size()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap::heapSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.size()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出堆顶元素</span></span><br><span class="line">        swap(a[<span class="number">0</span>], a[a.size()<span class="number">-1</span>]);  <span class="comment">// 堆顶元素与堆底元素交换</span></span><br><span class="line">        a.pop_back();  <span class="comment">// 删除堆底元素</span></span><br><span class="line">        shiftDown(<span class="number">0</span>);  <span class="comment">// 根结点的子堆都是大顶堆，从根开始调整</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>web学习笔记</title>
    <url>/2021/03/17/web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="web学习笔记"><a href="#web学习笔记" class="headerlink" title="web学习笔记"></a>web学习笔记</h1><h2 id="web技术概述"><a href="#web技术概述" class="headerlink" title="web技术概述"></a>web技术概述</h2><h3 id="Internet概述"><a href="#Internet概述" class="headerlink" title="Internet概述"></a>Internet概述</h3><h4 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h4><p>是Transmission Control Protocol(协议)/Internet Protocol的缩写，它定义了主机如何连入因特网，以及数据如何在主机间传输的标准。</p>
<h4 id="域名-Domain-Name-和DNS-Domain-Name-System"><a href="#域名-Domain-Name-和DNS-Domain-Name-System" class="headerlink" title="域名(Domain Name)和DNS(Domain Name System)"></a>域名(Domain Name)和DNS(Domain Name System)</h4><p>IP地址不方便记忆，用域名来替代ip地址。<br>以www.tsinghua.edu.com为例，cn是顶级域名，cn前面的都是子域名。<br>目前主要有三类顶级域名：<br>第一类是地理域名，共有243个国家和地区的代码，中国(CN)，日本(JP)等；<br>第二类是类别顶级域名，共7个，COM、NET、ORG、EDU、GOV、ARPA、INT；<br>第三类是新增的顶级域名BIZ、COOP、INFO、AERO、PRO、MUSEUM、NAME。<br>主机间进行通信时必须采用IP地址进行寻址，所以当使用域名时必须把域名转换为IP地址。<br>域名系统DNS主要由域名服务器组成。<br>域名服务器是指保存有该网络中所有主机的域名和对应的IP地址，并具有将域名转换为IP地址功能的服务器。<br>比如要访问www.tsinghua.edu.com必须通过DNS将域名转换为IP地址121.52.160.5才能进行通信。</p>
<h3 id="web体系结构"><a href="#web体系结构" class="headerlink" title="web体系结构"></a>web体系结构</h3><h4 id="1、web服务器"><a href="#1、web服务器" class="headerlink" title="1、web服务器"></a>1、web服务器</h4><p>访问web页面需要一个服务器来提供web页面，也称为网站</p>
<h4 id="2、客户端"><a href="#2、客户端" class="headerlink" title="2、客户端"></a>2、客户端</h4><p>用户通过浏览器访问web资源，浏览器就是客户端</p>
<h4 id="3、通信协议"><a href="#3、通信协议" class="headerlink" title="3、通信协议"></a>3、通信协议</h4><p>客户端和服务器之间通过HTTP协议通信，超文本传输协议(Hypertext Transfer Protocol,HTTP)是客户浏览器和web服务器通信的基础</p>
<h3 id="基本web技术"><a href="#基本web技术" class="headerlink" title="基本web技术"></a>基本web技术</h3><h4 id="URL-Uniform-Resource-Locator"><a href="#URL-Uniform-Resource-Locator" class="headerlink" title="URL(Uniform Resource Locator)"></a>URL(Uniform Resource Locator)</h4><p>URL格式<code>&lt;scheme&gt;:&lt;scheme-specific-part&gt;</code><br><code>&lt;scheme&gt;</code>指所用的方案名<br>HTTP URL方案用于表示可通过HTTP协议访问Internet资源，格式为<br><code>http://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?&lt;searchpart&gt;</code><br>其中<host>是主机域名或IP地址，<port>是端口(default=80)，<path>为请求访问文件的路径，<searchpart>是查询字符串，指定通过URL传递的参数。<br>例如<code>http://www.tsinghua.edu.cn/publish/th/index.html</code>中http是协议名，www.tsinghua.deu.cn是域名，publish/th/index.html是文件路径，包括文件名。</p>
<h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p>HTTP是web技术的核心，它设计了一套简单的规则来支持客户端和服务器(Client/Server)的通信。<br>HTTP采用C/S结构，客户端发送请求给服务器，HTTP规则定义了如何正确解析请求信息，服务器用响应信息回复请求。HTTP是建立在TCP/IP之上的，属于应用层协议。</p>
<h4 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h4><p>浏览器根据数据文件的扩展名来生成相应的MIME类型返回给浏览器，使得浏览器能够分辨不同类型的数据。</p>
<h3 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h3><p>web服务器应用层使用HTTP协议，信息内容采用HTML文档格式，信息定位使用URL。</p>
<h4 id="web服务器选择原则"><a href="#web服务器选择原则" class="headerlink" title="web服务器选择原则"></a>web服务器选择原则</h4><ul>
<li>响应速度</li>
<li>后端服务器的集成</li>
<li>管理的难易程度</li>
<li>系统的稳定性</li>
<li>安全性</li>
</ul>
<h4 id="常用web服务器"><a href="#常用web服务器" class="headerlink" title="常用web服务器"></a>常用web服务器</h4><ul>
<li>Microsoft IIS</li>
<li>Apache</li>
<li>Tomcat</li>
</ul>
<h3 id="超文本与标记语言"><a href="#超文本与标记语言" class="headerlink" title="超文本与标记语言"></a>超文本与标记语言</h3><p>超文本是将各种信息节点连接在一起的一种网状逻辑结构，标记语言是一套标识文档内容、结构和格式的语法规则。</p>
<h2 id="标准化页面"><a href="#标准化页面" class="headerlink" title="标准化页面"></a>标准化页面</h2><h3 id="三个必须元素"><a href="#三个必须元素" class="headerlink" title="三个必须元素"></a>三个必须元素</h3><pre><code>&lt;html&gt; 声明文档类型
&lt;head&gt; 描述属性和信息
&lt;body&gt; 文档的主体 
</code></pre><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><ul>
<li>元素必须正确嵌套</li>
<li>元素标签必须被关闭</li>
<li>元素标签和属性名必须小写</li>
<li>属性值必须加引号</li>
<li>属性必须有值</li>
</ul>
<h2 id="结构化文档"><a href="#结构化文档" class="headerlink" title="结构化文档"></a>结构化文档</h2><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><pre><code>&lt;b&gt;         粗体文字           &lt;strong&gt;      加重语气
&lt;big&gt;       大号字             &lt;sub&gt;         下标字
&lt;em&gt;        着重文字           &lt;sup&gt;         上标字
&lt;i&gt;         斜体字             &lt;ins&gt;         插入字
&lt;small&gt;     小号字             &lt;del&gt;         删除字
</code></pre><h3 id="计算机输出标签"><a href="#计算机输出标签" class="headerlink" title="计算机输出标签"></a>计算机输出标签</h3><pre><code>&lt;code&gt;    计算机代码             &lt;tt&gt;     打字机代码
&lt;kbd&gt;     键盘码                 &lt;var&gt;    定义变量
&lt;samp&gt;    计算机代码样本          &lt;pre&gt;    预格式文本
</code></pre><h3 id="引用和术语定义"><a href="#引用和术语定义" class="headerlink" title="引用和术语定义"></a>引用和术语定义</h3><pre><code>&lt;abbr&gt;      缩写                &lt;bdo&gt;          文字方向
&lt;acronym&gt;    首字母缩写          &lt;blockquote&gt;   长的引用语
&lt;address&gt;      地址              &lt;q&gt;            短的引用语
</code></pre><h3 id="XHTML列表"><a href="#XHTML列表" class="headerlink" title="XHTML列表"></a>XHTML列表</h3><pre><code>&lt;ol&gt;         有序列表             &lt;dl&gt;         定义列表
&lt;ul&gt;         无序列表             &lt;dt&gt;         定义列表项目
&lt;li&gt;         列表项               &lt;dd&gt;         定义列表项目描述
</code></pre><p>ul的属性type的属性值有disc（默认值，实心圆）square（实心方块）circle（空心圆）<br>ol的属性start的值为第一个列表项的number，type的属性值有A（大写字母）、a（小写字母）、I（大写罗马字母）、i（小写罗马字母）、1（数字）</p>
<h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3><p>定义列表是列表项&lt;dt&gt;和注释&lt;dd&GT;的组合</p>
<h3 id="lt-div-gt-确定文档结构"><a href="#lt-div-gt-确定文档结构" class="headerlink" title="&lt;div&gt;确定文档结构"></a>&lt;div&gt;确定文档结构</h3><p>&lt;div&gt;的属性有id、class，用于区分元素标识和为以后样式和脚本准备</p>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><h3 id="lt-a-gt-标签"><a href="#lt-a-gt-标签" class="headerlink" title="&lt;a&gt;标签"></a>&lt;a&gt;标签</h3><p>&lt;a&gt;的属性有href、id和name<br>href是链接，id和name可以创建一个网页内部的书签，有的浏览器支持id有的支持name，最好都用上<br>创建指向书签的超链接示例  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a id&#x3D;&quot;label&quot; name&#x3D;&quot;label&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;#label&quot;&gt;指向label&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<h2 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h2><h3 id="lt-img-gt-标签"><a href="#lt-img-gt-标签" class="headerlink" title="&lt;img&gt;标签"></a>&lt;img&gt;标签</h3><p>&lt;img&gt;是空元素，常用属性有  </p>
<ul>
<li>alt 图片加载不出时的替代文本  </li>
<li>src 图片的URL  </li>
<li>title 鼠标放在图片上显示的文本  </li>
<li>height 图像高度</li>
<li>wdith 图像宽度</li>
</ul>
<h3 id="lt-object-gt-标签"><a href="#lt-object-gt-标签" class="headerlink" title="&lt;object&gt;标签"></a>&lt;object&gt;标签</h3><p>&lt;object&gt;标签定义个一个嵌入的对象，该元素的作用是在网页中嵌入多媒体元素，如音频视频和Flash等，常用属性有</p>
<ul>
<li>classid 注册表中或某个URL中的类的ID值，用来指定浏览器中包含的对象的位置</li>
<li>codebase 在何处找到对象所需代码的基准URL</li>
<li>height 对象的高度</li>
<li>width 对象的宽度</li>
<li>name 为对象定义唯一的名称</li>
</ul>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="XHTML表格标签"><a href="#XHTML表格标签" class="headerlink" title="XHTML表格标签"></a>XHTML表格标签</h3><pre><code>&lt;table&gt;       定义表格         &lt;thead&gt;       表格的头部
&lt;caption&gt;     定义表格标题     &lt;tbody&gt;       表格的主体
&lt;th&gt;          标题行           &lt;tfoot&gt;       表格的脚部
&lt;tr&gt;          表格的行         &lt;col&gt;          用于表格列的属性
&lt;td&gt;          单元格           &lt;colgroup&gt;    表格列的组合
</code></pre><h4 id="lt-table-gt-标签"><a href="#lt-table-gt-标签" class="headerlink" title="&lt;table&gt;标签"></a>&lt;table&gt;标签</h4><p>常用属性</p>
<ul>
<li>border 规定表格边框的宽度，单位是像素</li>
<li>cellpadding 规定单元格边框与内容之间的空白</li>
<li>cellspacing 规定单元格之间的空白</li>
<li>width 规定表格的宽度</li>
</ul>
<h4 id="lt-tr-gt-标签"><a href="#lt-tr-gt-标签" class="headerlink" title="&lt;tr&gt;标签"></a>&lt;tr&gt;标签</h4><p>表格的行，一个&lt;tr&gt;包含多个&lt;th&gt;或&lt;td&gt;元素</p>
<h4 id="lt-td-gt-标签"><a href="#lt-td-gt-标签" class="headerlink" title="&lt;td&gt;标签"></a>&lt;td&gt;标签</h4><p>&lt;td&gt;的属性有</p>
<ul>
<li>colspan 单元格可横跨的列数</li>
<li>rowspan 单元格可横跨的行数</li>
</ul>
<h4 id="lt-col-gt"><a href="#lt-col-gt" class="headerlink" title="&lt;col&gt;"></a>&lt;col&gt;</h4><p>&lt;col&gt;标签只能使用在&lt;table&gt;和&lt;colgroup&gt;中，常用属性有</p>
<ul>
<li>span col元素横跨的行数</li>
<li>width col元素的宽度</li>
</ul>
<h4 id="lt-thead-gt-lt-tfoot-gt-lt-tbody-gt"><a href="#lt-thead-gt-lt-tfoot-gt-lt-tbody-gt" class="headerlink" title="&lt;thead&gt;&lt;tfoot&gt;&lt;tbody&gt;"></a>&lt;thead&gt;&lt;tfoot&gt;&lt;tbody&gt;</h4><p>三个标签必须用在&lt;table&gt;中，出现次序为&lt;thead&gt;、&lt;tfoot&gt;、&lt;tbody&gt;&lt;thead&gt;内部必须有&lt;tr&gt;标签</p>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="XHTML表单"><a href="#XHTML表单" class="headerlink" title="XHTML表单"></a>XHTML表单</h3><h4 id="表单-1"><a href="#表单-1" class="headerlink" title="表单"></a>表单</h4><p>表单由三部分组成，表单标签、表单域、表单按钮</p>
<h4 id="lt-form-gt-标签"><a href="#lt-form-gt-标签" class="headerlink" title="&lt;form&gt;标签"></a>&lt;form&gt;标签</h4><p>&lt;form&gt;用于创建表单，表单用于向服务器传输数据，&lt;form&gt;的属性有</p>
<ul>
<li>action 提交表单时，向何处发送数据</li>
<li>method 定义如何发送表单数据</li>
</ul>
<h5 id="action属性"><a href="#action属性" class="headerlink" title="action属性"></a>action属性</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;index.html&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">    &lt;span&gt;account:&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;name&quot; name&#x3D;&quot;name&quot;&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    &lt;span&gt;password:&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;unit&quot; name&#x3D;&quot;unit&quot;&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;sign in&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<p>如上面代码所示，表单会提交到index.html页面</p>
<h5 id="methond属性"><a href="#methond属性" class="headerlink" title="methond属性"></a>methond属性</h5><p>属性值有get和post两种<br>使用get方法不能发送比较多的表单数据，URL的长度限制在8192个字符内<br>如果要手机用户名和密码，银行卡或其他保密信息，post方法会比get方法安全，但容易被黑客截取</p>
<h3 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h3><h4 id="表单域标签"><a href="#表单域标签" class="headerlink" title="表单域标签"></a>表单域标签</h4><ul>
<li>&lt;input&gt; 输入域</li>
<li>&lt;textarea&gt; 多行文本域</li>
<li>&lt;label&gt; 标签</li>
<li>&lt;fieldset&gt; 分组或字段域</li>
<li>&lt;legend&gt; 分组或字段域的标题</li>
<li>&lt;selcet&gt; 列表</li>
<li>&lt;option&gt; 列表项</li>
<li>&lt;optgroup&gt; 列表选项组</li>
<li>&lt;button&gt; 按钮</li>
</ul>
<h4 id="lt-input-gt-标签"><a href="#lt-input-gt-标签" class="headerlink" title="&lt;input&gt;标签"></a>&lt;input&gt;标签</h4><p>&lt;input&gt;是空标签，根据type不同的属性值可以有很多种形式，&lt;input&gt;的属性有</p>
<ul>
<li>accept </li>
<li>alt</li>
<li>checked</li>
<li>disabled</li>
<li>maxlegnth</li>
<li>name</li>
<li>readonly</li>
<li>szie</li>
<li>src</li>
<li>type</li>
<li>value</li>
</ul>
<h5 id="type的属性"><a href="#type的属性" class="headerlink" title="type的属性"></a>type的属性</h5><ul>
<li>button 按钮</li>
<li>checkbox 复选框</li>
<li>file 文件域，包括输入字段和“浏览”按钮，供文件上传</li>
<li>hidden 隐藏域</li>
<li>image 图像形式的提交按钮</li>
<li>password 密码域，字符被掩码</li>
<li>radio 单选按钮</li>
<li>reset 重置按钮，清除表单所有数据</li>
<li>submit 提交按钮，把表单数据提交到服务器</li>
<li>text 单行文本框，默认宽度20个字符</li>
</ul>
<h5 id="value属性"><a href="#value属性" class="headerlink" title="value属性"></a>value属性</h5><p>对于不同的type，value属性值的含义不同</p>
<ul>
<li>type为button、reset、submit，value定义按钮上显示的文本</li>
<li>type为text、password、hidden，value定义域的初始值</li>
<li>type为checkbox、radio、checkbox，value定义与输入相关联的值</li>
</ul>
<h5 id="accept属性"><a href="#accept属性" class="headerlink" title="accept属性"></a>accept属性</h5><p>accept只能在type=”file”时使用，用于规定上传的文件类型<br>下面代码表示接收gif格式的图片<br><code>&lt;input type=&quot;file&quot; id=&quot;img&quot; name=&quot;img&quot; accpet=&quot;image/gif/&gt;&quot;</code><br>下面代码表示接收任意格式的图片<br><code>&lt;input type=&quot;file&quot; id=&quot;img&quot; name=&quot;img&quot; accept=&quot;image/*&quot;</code></p>
<h4 id="lt-textarea-gt-标签"><a href="#lt-textarea-gt-标签" class="headerlink" title="&lt;textarea&gt;标签"></a>&lt;textarea&gt;标签</h4><p>&lt;textarea&gt;属性</p>
<ul>
<li>cols</li>
<li>rows</li>
<li>wrap</li>
<li>disabled</li>
<li>name</li>
<li>readonly</li>
</ul>
<h5 id="cols和rows"><a href="#cols和rows" class="headerlink" title="cols和rows"></a>cols和rows</h5><p>规定&lt;textarea&gt;的大小</p>
<h5 id="wrap"><a href="#wrap" class="headerlink" title="wrap"></a>wrap</h5><p>自动换行，属性值有virtual和physical<br>wrap=”virtual”实现文本区的自动换行，但是在传输给服务器时，文本只在用户按enter键的时候换行<br>wrap=”physical”实现文本区的自动换行，并以这种形式传输给服务器  </p>
<h4 id="lt-label-gt-标签"><a href="#lt-label-gt-标签" class="headerlink" title="&lt;label&gt;标签"></a>&lt;label&gt;标签</h4><p>&lt;label&gt;为&lt;input&gt;元素定义标注，&lt;label&gt;的for属性可以把&lt;label&gt;绑定到元素id值和for属性值相同的元素上，在单体&lt;label&gt;元素内文本时，浏览器会聚焦到&lt;label&gt;绑定的元素上</p>
<h4 id="lt-filedset-gt"><a href="#lt-filedset-gt" class="headerlink" title="&lt;filedset&gt;"></a>&lt;filedset&gt;</h4><p>&lt;filedset&gt;可为表单相关元素分组，&lt;legend&gt;为&lt;filedset&gt;定义分组标题</p>
<h4 id="lt-selcet-gt-标签"><a href="#lt-selcet-gt-标签" class="headerlink" title="&lt;selcet&gt;标签"></a>&lt;selcet&gt;标签</h4><p>&lt;select&gt;可以创建单选或多选列表，提交表单时，浏览器会提交选中的项目，&lt;selcet&gt;常用的属性有</p>
<ul>
<li>disabled</li>
<li>multiple</li>
<li>name</li>
<li>size</li>
</ul>
<h4 id="lt-option-gt-标签"><a href="#lt-option-gt-标签" class="headerlink" title="&lt;option&gt;标签"></a>&lt;option&gt;标签</h4><p>&lt;option&gt;定义列表中的一个选项，常用属性有</p>
<ul>
<li>disabled</li>
<li>label</li>
<li>selected</li>
<li>value</li>
</ul>
<h4 id="lt-optgroup-gt-标签"><a href="#lt-optgroup-gt-标签" class="headerlink" title="&lt;optgroup&gt;标签"></a>&lt;optgroup&gt;标签</h4><p>&lt;optgroup&gt;用于组合选项，常用的属性有</p>
<ul>
<li>label</li>
<li>disabled</li>
</ul>
<h4 id="lt-button-gt-标签"><a href="#lt-button-gt-标签" class="headerlink" title="&lt;button&gt;标签"></a>&lt;button&gt;标签</h4><p>&lt;button&gt;定义一个按钮，常用属性有</p>
<ul>
<li>disabled</li>
<li>name</li>
<li>type</li>
<li>value</li>
</ul>
<h2 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h2><h3 id="CSS概述"><a href="#CSS概述" class="headerlink" title="CSS概述"></a>CSS概述</h3><p>CSS(Cascading Style Sheets)优点</p>
<ul>
<li>表现和内容分离</li>
<li>提高页面浏览速度</li>
<li>易于维护和改版</li>
</ul>
<h3 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h3><p>selector{property: value}</p>
<h3 id="CSS常用选择器"><a href="#CSS常用选择器" class="headerlink" title="CSS常用选择器"></a>CSS常用选择器</h3><ol>
<li>类型选择器<br>定义时直接使用元素标签，如<br>p{color: green}</li>
<li>通用选择器<br>用*表示，如<br>*{fontsize: 12px}<br>使文档内所有文字字体大小设置为12个像素</li>
<li>分组选择器<br>如<br>h1,h2,h3,h4,h5,h6{fontsize: 12px}</li>
<li><p>包含(派生)选择器</p>
</li>
<li><p>id选择器</p>
</li>
<li><p>类选择器</p>
</li>
<li><p>子元素选择器</p>
</li>
</ol>
<p>8.相邻兄弟选择器 </p>
<h3 id="CSS属性"><a href="#CSS属性" class="headerlink" title="CSS属性"></a>CSS属性</h3><h3 id="CSS属性值"><a href="#CSS属性值" class="headerlink" title="CSS属性值"></a>CSS属性值</h3><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><p>单个页面需要应用样式时，用内部样式表，直接在&lt;body&gt;里面用&lt;style&gt;定义样式<br>&lt;style&gt;中type属性是必须的，唯一的属性值为”text/css”</p>
<h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><p>多个页面需要用相同样式时，使用外部样式表，样式表的扩展名为.css，用注释/* */<br>用&lt;link&gt;标签连接外部样式表，&lt;style&gt;是空元素，只能用在&lt;head&gt;中，其可选属性有</p>
<ul>
<li>type 被连接文档的MIME类型</li>
<li>href 被连接文档的位置</li>
<li>rel 当前文档与被连接文档之间的关系</li>
</ul>
<h4 id="rel的属性值"><a href="#rel的属性值" class="headerlink" title="rel的属性值"></a>rel的属性值</h4><ul>
<li>alternate</li>
<li>stylesheet</li>
<li>start</li>
<li>next</li>
<li>prev</li>
<li>index</li>
<li>glossary</li>
<li>copyright</li>
<li>chapter</li>
<li>section</li>
<li>subsection</li>
<li>appendix</li>
<li>help</li>
<li>bookmark</li>
</ul>
<h3 id="层叠样式"><a href="#层叠样式" class="headerlink" title="层叠样式"></a>层叠样式</h3><p>层叠的重要度次序</p>
<ol>
<li>标有!important的用户样式，标有!important的作者样式</li>
<li>作者样式</li>
<li>用户样式</li>
<li>浏览器默认样式</li>
<li>最后根据CSS specificity</li>
</ol>
<h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><h3 id="CSS盒模型概述"><a href="#CSS盒模型概述" class="headerlink" title="CSS盒模型概述"></a>CSS盒模型概述</h3><p>由4部分组成，从外到内</p>
<ul>
<li>margin 外边距，指与其他盒模型的距离，默认是透明的</li>
<li>border 边框，指盒子本身</li>
<li>padding 内边距，也称填充，内容和边框的距离</li>
<li>content 元素的内容</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
  </entry>
  <entry>
    <title>leetcode</title>
    <url>/2021/03/17/leetcode/</url>
    <content><![CDATA[<h3 id="1765-地图中的最高点"><a href="#1765-地图中的最高点" class="headerlink" title="1765. 地图中的最高点"></a>1765. 地图中的最高点</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dirs = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; highestPeak(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; isWater) &#123;</span><br><span class="line">        m = isWater.size();</span><br><span class="line">        n = isWater[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; visited(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (n, <span class="number">0</span>));</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; heights(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (n, <span class="number">0</span>));</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; que;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将所有水域进队列，格子的高度实际上就是离最近水域的距离</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span>(isWater[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    que.push(<span class="built_in">pair</span>&#123;i, j&#125;);</span><br><span class="line">                    visited[i][j] = <span class="number">1</span>;</span><br><span class="line">                    heights[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 多源bfs</span></span><br><span class="line">        <span class="keyword">int</span> currh = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!que.empty()) &#123;</span><br><span class="line">            currh++;</span><br><span class="line">            <span class="keyword">int</span> qsz = que.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; qsz; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = que.front().first, y = que.front().second;</span><br><span class="line">                que.pop();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;d: dirs) &#123;</span><br><span class="line">                    <span class="keyword">int</span> nx = x + d[<span class="number">0</span>], ny = y + d[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(nx &lt; <span class="number">0</span> || nx &gt;= m || ny &lt; <span class="number">0</span> || ny &gt;= n || visited[nx][ny])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    que.push(<span class="built_in">pair</span>(nx, ny));</span><br><span class="line">                    heights[nx][ny] = currh;</span><br><span class="line">                    visited[nx][ny] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> heights;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="721-账户合并"><a href="#721-账户合并" class="headerlink" title="721. 账户合并"></a>721. 账户合并</h3><ol>
<li>建立email到id和email的name的映射</li>
<li>构造并查集，将accounts[i]中的unite(第一个邮箱的id, 后来邮箱的id)</li>
<li>遍历email到id的映射，将属于同一个父类的邮箱放到同一个vector\<string>中</li>
<li>将3中得到的vector\<string>排序，并将name和其一起push到ans中</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    UnionFind(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        parent.resize(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            parent[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index == parent[index] ? index : find(parent[index]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">        parent[find(index2)] = find(index1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; parent;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; accountsMerge(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;&amp; accounts) &#123;</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">0</span>, m = accounts.size();</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; emailToId;  <span class="comment">// email到id的映射</span></span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; emailToName;  <span class="comment">// email到name的映射</span></span><br><span class="line">        <span class="comment">// 为每个email分配id和name</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; accounts[i].size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(emailToId.find(accounts[i][j]) == emailToId.end())</span><br><span class="line">                    emailToId[accounts[i][j]] = id++;</span><br><span class="line">                <span class="keyword">if</span>(emailToName.find(accounts[i][j]) == emailToName.end())</span><br><span class="line">                    emailToName[accounts[i][j]] = accounts[i][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造并查集</span></span><br><span class="line">        <span class="function">UnionFind <span class="title">uf</span><span class="params">(id+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">string</span> name = accounts[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> firstIndex = emailToId[accounts[i][<span class="number">1</span>]];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; accounts[i].size(); j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> followIndex = emailToId[accounts[i][j]];</span><br><span class="line">                uf.unite(firstIndex, followIndex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将连通的id放到map的value: vector&lt;string&gt;中、</span></span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; idToEmails;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;pi: emailToId) &#123;</span><br><span class="line">            <span class="built_in">string</span> email = pi.first;</span><br><span class="line">            <span class="keyword">int</span> index = pi.second;</span><br><span class="line">            idToEmails[uf.find(index)].push_back(email);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;pi: idToEmails) &#123;</span><br><span class="line">            <span class="built_in">string</span> name = emailToName[pi.second[<span class="number">0</span>]];</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; temp;</span><br><span class="line">            temp.push_back(name);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;email: pi.second)</span><br><span class="line">                temp.push_back(email);</span><br><span class="line">            sort(temp.begin(), temp.end());  <span class="comment">// 邮箱根据字符ASCII顺序排列</span></span><br><span class="line">            ans.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a>206. 反转链表</h3><ol>
<li><p>迭代</p>
<p>curr指向当前需要转换指向关系的节点，pre为curr的上一节点，next存储curr的下一节点</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *pre = <span class="literal">nullptr</span>, *curr = head;</span><br><span class="line">        <span class="keyword">while</span>(curr != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            ListNode *next = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = pre;</span><br><span class="line">            pre = curr;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="92-反转链表II"><a href="#92-反转链表II" class="headerlink" title="92. 反转链表II"></a>92. 反转链表II</h3><p>将left和right之间的节点val压入栈中，再从left开始给节点赋值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">1</span>;</span><br><span class="line">        ListNode* temp = head;</span><br><span class="line">        <span class="keyword">while</span>(pos != left) &#123;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">            pos++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; mystk;</span><br><span class="line">        ListNode *curr = temp;</span><br><span class="line">        <span class="keyword">int</span> cur = pos;</span><br><span class="line">        <span class="keyword">while</span>(pos &lt;= right) &#123;</span><br><span class="line">            mystk.push(temp-&gt;val);</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">            pos++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!mystk.empty()) &#123;</span><br><span class="line">            curr-&gt;val = mystk.top();</span><br><span class="line">            mystk.pop();</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>tips:</p>
<ul>
<li><strong>建立新的头节点newhead以防止left=1时头节点会发生变化的情况</strong></li>
<li>找到要反转链表的前驱pre，后继curr，与链表左节点leftNode，链表右节点rightNode，切断要反转的链表进行反转，再重新接回来</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverseLinkedList</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode *pre = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode *curr = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            ListNode *next = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = pre;</span><br><span class="line">            pre = curr;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        ListNode *newhead = <span class="keyword">new</span> ListNode (<span class="number">-1</span>, head);</span><br><span class="line">        ListNode *pre = newhead;  <span class="comment">// 前驱</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; left; i++) &#123;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *rightNode = pre;  <span class="comment">// 反转链表的右节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; right - left + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            rightNode = rightNode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *leftNode = pre-&gt;next;  <span class="comment">// 反转链表的左节点</span></span><br><span class="line">        ListNode *curr = rightNode-&gt;next;  <span class="comment">// 后继</span></span><br><span class="line">        pre-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        rightNode-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        reverseLinkedList(leftNode);</span><br><span class="line">        pre-&gt;next = rightNode;</span><br><span class="line">        leftNode-&gt;next = curr;</span><br><span class="line">        <span class="keyword">return</span> newhead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a>112. 路径总和</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasPathSum</span><span class="params">(TreeNode* root, <span class="keyword">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;val == targetSum &amp;&amp; !root-&gt;left &amp;&amp; !root-&gt;right)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> hasPathSum(root-&gt;left, targetSum - root-&gt;val) || hasPathSum(root-&gt;right, targetSum - root-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="113-路径总和II"><a href="#113-路径总和II" class="headerlink" title="113. 路径总和II"></a>113. 路径总和II</h3><p>dfs+回溯</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode *curr, <span class="keyword">int</span> sum, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;path)</span> </span>&#123;</span><br><span class="line">        path.push_back(curr-&gt;val);</span><br><span class="line">        <span class="keyword">int</span> newSum = sum - curr-&gt;val;</span><br><span class="line">        <span class="keyword">if</span>(newSum == <span class="number">0</span> &amp;&amp; !curr-&gt;left &amp;&amp; !curr-&gt;right)</span><br><span class="line">            ans.push_back(path);</span><br><span class="line">        <span class="keyword">if</span>(curr-&gt;left) &#123;</span><br><span class="line">            dfs(curr-&gt;left, newSum, path);</span><br><span class="line">            path.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(curr-&gt;right) &#123;</span><br><span class="line">            dfs(curr-&gt;right, newSum, path);</span><br><span class="line">            path.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; pathSum(TreeNode* root, <span class="keyword">int</span> targetSum) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line">        <span class="keyword">if</span>(root)</span><br><span class="line">            dfs(root, targetSum, path);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="437-路径总和III"><a href="#437-路径总和III" class="headerlink" title="437. 路径总和III"></a>437. 路径总和III</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ret = pathSumStartWithRoot(root ,sum) + pathSum(root-&gt;left, sum) + pathSum(root-&gt;right, sum);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pathSumStartWithRoot</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val == sum)</span><br><span class="line">            ret++;</span><br><span class="line">        ret += pathSumStartWithRoot(root-&gt;left, sum - root-&gt;val) + pathSumStartWithRoot(root-&gt;right, sum-root-&gt;val);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="341-扁平化嵌套列表迭代器"><a href="#341-扁平化嵌套列表迭代器" class="headerlink" title="341. 扁平化嵌套列表迭代器"></a>341. 扁平化嵌套列表迭代器</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NestedIterator</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    NestedIterator(<span class="built_in">vector</span>&lt;NestedInteger&gt; &amp;nestedList) &#123;</span><br><span class="line">        dfs(nestedList);</span><br><span class="line">        curr = ans.begin();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *curr++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curr != ans.end();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator curr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;NestedInteger&gt; &amp;nestedList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;elem: nestedList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(elem.isInteger())</span><br><span class="line">                ans.push_back(elem.getInteger());</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dfs(elem.getList());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143. 最长公共子序列"></a>1143. 最长公共子序列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0 一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</span><br></pre></td></tr></table></figure>
<p>m为text1的长度，n为text2的长度，dp[i][j]表示text1的前i个字符与text2中前j个字符的最长公共子序列，下面给出状态转移方程</p>
<script type="math/tex; mode=display">
dp[i][j] = \begin{cases}
dp[i-1][j-1] + 1 \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if(text1[i] == text2[j]) \\
max(dp[i][j-1], \ dp[i-1][j]) \ \ \ \ \ \ \ 
 if(text1[i] != text2[j])
\end{cases}</script><ul>
<li>如果text1[i] == text2[j]，那么text1的前i个字符和text2的前j个字符的最长公共子序列的长度 就是text1的前i-1个字符和text2的前j-1字符的最长公共子序列的长度 +1</li>
<li>如果text1[i] != text2[j]，text1的前i个字符和text2的前j个字符的最长公共子序列的长度 是 dp[i-1][j]和dp[i][j-1]中较大的值</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(<span class="built_in">string</span> text1, <span class="built_in">string</span> text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = text1.size(),  n = text2.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(m+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (n+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(text1[i] == text2[j])</span><br><span class="line">                    dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = dp[i][j] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = max(dp[i+<span class="number">1</span>][j], dp[i][j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="179-最大数"><a href="#179-最大数" class="headerlink" title="179. 最大数"></a>179. 最大数</h3><p>atoi和stoi的区别</p>
<ul>
<li>stoi(std::string)，超过INT_MAX会报错</li>
<li>atoi(const char *)，超过int上界取上界，超过下界取下界</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">largestNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</span><br><span class="line">            stringNums.push_back(to_string(nums[i]));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            <span class="built_in">string</span> temp = findMax();</span><br><span class="line">            ans += temp;</span><br><span class="line">            <span class="comment">// 删除被选中的元素</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it = stringNums.begin(); it != stringNums.end(); it++)</span><br><span class="line">                <span class="keyword">if</span>(*it == temp) &#123;</span><br><span class="line">                    stringNums.erase(it);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for(int i = 0; i &lt; ans.size(); i++)</span></span><br><span class="line">        <span class="comment">//     if(ans[i] != &#x27;0&#x27;)</span></span><br><span class="line">        <span class="comment">//         return ans;</span></span><br><span class="line">        <span class="keyword">return</span> atoi(ans.c_str()) == <span class="number">0</span> ? <span class="string">&quot;0&quot;</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">findMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> num = *stringNums.begin();</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = stringNums.begin(); it != stringNums.end(); it++, index++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(index != <span class="number">0</span>) &#123;</span><br><span class="line">                num = findGreater(*it, num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">findGreater</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;num1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sz1 = num1.size(), sz2 = num2.size();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较num1和num2前min(sz1, sz2)的大小</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; min(sz1, sz2); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(num1[i] &gt; num2[i])</span><br><span class="line">                <span class="keyword">return</span> num1;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num1[i] == num2[i])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> num2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面考虑两种情况，sz1大和sz2大</span></span><br><span class="line">        <span class="keyword">int</span> flag = (sz1 &gt; sz2 ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="keyword">return</span> findGreaterWithDiffSize(num1, num2);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> findGreaterWithDiffSize(num2, num1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">findGreaterWithDiffSize</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;num1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sz1 = num1.size(), sz2 = num2.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = sz2; i &lt; sz1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sz2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(num1[i] &gt; num2[j])</span><br><span class="line">                    <span class="keyword">return</span> num1;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(num1[i] == num2[j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> num2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; stringNums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="100-相同的树"><a href="#100-相同的树" class="headerlink" title="100. 相同的树"></a>100. 相同的树</h3><p>dfs</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(p, q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p &amp;&amp; !q || !p &amp;&amp; q)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p &amp;&amp; q) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;val != q-&gt;val)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!p-&gt;left &amp;&amp; !q-&gt;left &amp;&amp; !p-&gt;right &amp;&amp; !q-&gt;right)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!p &amp;&amp; !q)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> dfs(p-&gt;left, q-&gt;left) &amp;&amp; dfs(p-&gt;right, q-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="783-二叉搜索树节点最小距离"><a href="#783-二叉搜索树节点最小距离" class="headerlink" title="783. 二叉搜索树节点最小距离"></a>783. 二叉搜索树节点最小距离</h3><ul>
<li>二叉搜索树中序遍历得到的是有序数列，所以最小距离肯定出现在相邻位置</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDiffInBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        inOrder(root);</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode* curr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(curr == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        inOrder(curr-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(pre == <span class="number">-1</span>)</span><br><span class="line">            pre = curr-&gt;val;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(curr-&gt;val - pre &lt; min) </span><br><span class="line">                min = curr-&gt;val - pre;</span><br><span class="line">            pre = curr-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        inOrder(curr-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">0x7fffffff</span>, pre = <span class="number">-1</span>;  <span class="comment">// pre记录上一个节点的值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a>46. 全排列</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; permute(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        n = nums.size();</span><br><span class="line">        visited.resize(n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            backTrack(i, nums);</span><br><span class="line">            <span class="comment">// 需要将加入的第一个点回溯</span></span><br><span class="line">            visited[i] = <span class="number">0</span>;</span><br><span class="line">            path.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backTrack</span><span class="params">(<span class="keyword">int</span> idx, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        visited[idx] = <span class="number">1</span>;</span><br><span class="line">        path.push_back(nums[idx]);</span><br><span class="line">        <span class="keyword">if</span>(path.size() == n) &#123;</span><br><span class="line">            ans.push_back(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[i])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            backTrack(i, nums);</span><br><span class="line">            path.pop_back();</span><br><span class="line">            visited[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; visited;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="47-全排列II"><a href="#47-全排列II" class="headerlink" title="47. 全排列II"></a>47. 全排列II</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; permuteUnique(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        n = nums.size();</span><br><span class="line">        visited.resize(n, <span class="number">0</span>);</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            backTrack(i, nums);</span><br><span class="line">            <span class="comment">// 需要将加入的第一个点回溯</span></span><br><span class="line">            visited[i] = <span class="number">0</span>;</span><br><span class="line">            path.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backTrack</span><span class="params">(<span class="keyword">int</span> idx, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        visited[idx] = <span class="number">1</span>;</span><br><span class="line">        path.push_back(nums[idx]);</span><br><span class="line">        <span class="keyword">if</span>(path.size() == n) &#123;</span><br><span class="line">            ans.push_back(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[i] || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>] &amp;&amp; visited[i<span class="number">-1</span>]))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            backTrack(i, nums);</span><br><span class="line">            path.pop_back();</span><br><span class="line">            visited[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; visited;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="208-实现Trie-前缀树"><a href="#208-实现Trie-前缀树" class="headerlink" title="208. 实现Trie(前缀树)"></a>208. 实现Trie(前缀树)</h3><p>前缀树的3个特性</p>
<ol>
<li>根节点不包含字符，除根节点外每一个节点都只包含一个字符</li>
<li><p>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串</p>
</li>
<li><p>每个节点的所有子节点包含的字符都不相同</p>
</li>
</ol>
<p>前缀树的实现：</p>
<ol>
<li>Trie的成员有size=26的vector<Trie *>和bool型变量isEnd，isEnd用于记录string是否结束</li>
<li>insert操作<ul>
<li>首先将用临时指针Trie *temp指向前缀树的根节点this</li>
<li>遍历字符串，如果字符对应的children[word[i] - ‘a’]不存在就创建它，并将temp指向下一节点</li>
</ul>
</li>
<li>search操作<ul>
<li>用临时指针Trie *temp指向前缀树的根节点this</li>
<li>遍历字符串，如果字符对应的children[word[i] - ‘a’]不存在说明该单词不在前缀树中，返回false，否则temp指向下一节点</li>
<li>最后判断temp-&gt;isEnd == true，为true说明有单词在这结束返回true否则返回false</li>
</ul>
</li>
<li>startWith(string prefix)检查是否有以prefix为前缀的单词，与search的区别是不用判断temp-&gt;isEnd</li>
</ol>
<p><img src="https://pic2.zhimg.com/80/v2-9d07fbd164fc0d737aabe428b4484bd1_1440w.png" alt="img" style="zoom:80%;" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    Trie(): children(<span class="number">26</span>), isEnd(<span class="literal">false</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Inserts a word into the trie. */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        Trie *temp = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> curr = word[i] - <span class="string">&#x27;a&#x27;</span>;  <span class="comment">// 当前字符在children中的索引</span></span><br><span class="line">            <span class="keyword">if</span>(temp-&gt;children[curr] == <span class="literal">nullptr</span>)</span><br><span class="line">                temp-&gt;children[curr] = <span class="keyword">new</span> Trie;</span><br><span class="line">            temp = temp-&gt;children[curr];</span><br><span class="line">        &#125;</span><br><span class="line">        temp-&gt;isEnd = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns if the word is in the trie. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">search</span><span class="params">(<span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        Trie *temp = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> curr = word[i] - <span class="string">&#x27;a&#x27;</span>;  <span class="comment">// 当前字符在children中的索引</span></span><br><span class="line">            <span class="keyword">if</span>(temp-&gt;children[curr] == <span class="literal">nullptr</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                temp = temp-&gt;children[curr];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (temp-&gt;isEnd &amp;&amp; temp) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns if there is any word in the trie that starts with the given prefix. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">startsWith</span><span class="params">(<span class="built_in">string</span> prefix)</span> </span>&#123;</span><br><span class="line">        Trie *temp = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prefix.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> curr = prefix[i] - <span class="string">&#x27;a&#x27;</span>;  <span class="comment">// 当前字符在children中的索引</span></span><br><span class="line">            <span class="keyword">if</span>(temp-&gt;children[curr] == <span class="literal">nullptr</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            temp = temp-&gt;children[curr];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;Trie*&gt; children;</span><br><span class="line">    <span class="keyword">bool</span> isEnd;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a>198. 打家劫舍</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</span><br><span class="line">给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</span><br></pre></td></tr></table></figure>
<p>创建一个dp(nums.size())的vector<br>dp[i]表示小偷从第i个房屋离开时的最大收益<br>小偷进入第i个房屋有下面两种情况</p>
<ul>
<li>偷了第i-1个房屋，则偷窃总金额为前i-1个房屋的偷窃总金额</li>
<li>没有偷第i-1个房屋，则偷窃总金额为前i-2个房屋的偷窃总金额和第i个房屋的现金</li>
</ul>
<p>写出状态转移方程</p>
<script type="math/tex; mode=display">
dp[i] = max(dp[i-2] + nums[i], dp[i-1])\ \ \ \ i < nums.size()</script><p>边界条件（房屋数大于等于2时）</p>
<script type="math/tex; mode=display">
\begin{cases}
dp[0] = nums[0]\\
dp[1] = max(nums[0], nums[1])
\end{cases}</script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.size() == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            dp[i] = max(dp[i<span class="number">-2</span>] + nums[i], dp[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *max_element(dp.begin(), dp.end());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="213-打家劫舍II"><a href="#213-打家劫舍II" class="headerlink" title="213. 打家劫舍II"></a>213. 打家劫舍II</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</span><br><span class="line">给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，能够偷窃到的最高金额。</span><br></pre></td></tr></table></figure>
<p>创建两个数组dp1, dp2<br>dp1偷第一个房屋，dp2不偷第一个房屋，由此得到边界条件</p>
<script type="math/tex; mode=display">
\begin{cases}
dp1[0] = dp1[0] = nums[0]\\
dp2[0] = 0, dp[1] = nums[1]
\end{cases}</script><p>状态转移方程</p>
<script type="math/tex; mode=display">
\begin{cases}
dp1[i] = max(dp1[i-2] + nums[i], dp1[i-1])\ \ \ \ i < nums.size()-1\\
dp2[i] = max(dp2[i-2] + nums[i], dp2[i-1])\ \ \ \ i < nums.size()-1
\end{cases}</script><p>在最后一间房屋时(int sz = nums.size()-1)</p>
<ul>
<li>dp1偷了第一间房屋所以不能偷最后一间所以$dp1[sz-1] = dp1[sz-2]$</li>
<li>dp2没偷第一间房屋所以$dp2[sz-1] = max(dp2[sz-3]+nums[sz-1], dp2[sz-2])$</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.size() == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums.size() == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        vector&lt;int&gt; dp1(nums.size()), dp2(nums.size());</span><br><span class="line">        dp1[<span class="number">0</span>] = nums[<span class="number">0</span>];  <span class="comment">// dp1偷第一个房屋</span></span><br><span class="line">        dp1[<span class="number">1</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp2[<span class="number">0</span>] = <span class="number">0</span>;   <span class="comment">// dp2不偷第一个房屋</span></span><br><span class="line">        dp2[<span class="number">1</span>] = nums[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; nums.size()<span class="number">-1</span>; i++) &#123;</span><br><span class="line">            dp1[i] = max(dp1[i<span class="number">-2</span>] + nums[i], dp1[i<span class="number">-1</span>]);</span><br><span class="line">            dp2[i] = max(dp2[i<span class="number">-2</span>] + nums[i], dp2[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp1[nums.size()<span class="number">-1</span>] = max(dp1[nums.size()<span class="number">-2</span>], dp1[nums.size()<span class="number">-3</span>]);</span><br><span class="line">        dp2[nums.size()<span class="number">-1</span>] = max(dp2[nums.size()<span class="number">-3</span>]+nums[nums.size()<span class="number">-1</span>], dp2[nums.size()<span class="number">-2</span>]);</span><br><span class="line">        <span class="keyword">return</span> max(dp1[nums.size()<span class="number">-1</span>], dp2[nums.size()<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="263-丑数"><a href="#263-丑数" class="headerlink" title="263. 丑数"></a>263. 丑数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span>(n % factor[i] == <span class="number">0</span>)</span><br><span class="line">                n /= factor[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> factor[<span class="number">3</span>] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="264-丑数2"><a href="#264-丑数2" class="headerlink" title="264. 丑数2"></a>264. 丑数2</h3><p>方法一：最小堆<br>要得到从小到大的第n个丑数，可以使用最小堆实现。<br>初始时堆为空，首先将最小的丑数1加入堆。<br>每次取出堆顶元素x，则x是堆中最小的丑数，由于 2x, 3x, 5x2x,3x,5x 也是丑数，因此将 2x, 3x, 5x2x,3x,5x 加入堆。<br>上述做法会导致堆中出现重复元素的情况。为了避免重复元素，可以使用哈希集合去重，避免相同元素多次加入堆。在排除重复元n素的情况下，第 nn 次从最小堆中取出的元素即为第n个丑数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">priority_queue</span>&lt;<span class="keyword">long</span>, <span class="built_in">vector</span>&lt;<span class="keyword">long</span>&gt;, greater&lt;<span class="keyword">long</span>&gt;&gt; heap;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">long</span>&gt; mySet;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; factors = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        heap.push(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> x = heap.top();</span><br><span class="line">            heap.pop();</span><br><span class="line">            ans = x;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;factor: factors) &#123;</span><br><span class="line">                <span class="keyword">long</span> temp = x * factor;</span><br><span class="line">                <span class="keyword">if</span>(mySet.find(temp) == mySet.end()) &#123;</span><br><span class="line">                    mySet.insert(temp);</span><br><span class="line">                    heap.push(temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="数据库系统概论"><a href="#数据库系统概论" class="headerlink" title="数据库系统概论"></a>数据库系统概论</h1><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><h4 id="数据模型分类"><a href="#数据模型分类" class="headerlink" title="数据模型分类"></a>数据模型分类</h4><ol>
<li>逻辑模型：按用户的观点对数据进行建模，主要用于数据库设计</li>
<li>概念模型：按计算机系统的观点对数据建模，主要用于DBMS的实现</li>
<li>物理模型：数据在硬件的组织方式</li>
</ol>
<h4 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h4><ul>
<li>数据结构</li>
<li><p>数据操作 CRUD $\cdots$</p>
</li>
<li><p>数据的完整性约束条件</p>
</li>
</ul>
<h3 id="实体-联系模型"><a href="#实体-联系模型" class="headerlink" title="实体-联系模型"></a>实体-联系模型</h3><h4 id="实体集"><a href="#实体集" class="headerlink" title="实体集"></a>实体集</h4><p>类似于类的概念</p>
<h4 id="实体型之间的联系"><a href="#实体型之间的联系" class="headerlink" title="实体型之间的联系"></a>实体型之间的联系</h4><h5 id="两个实体型之间的联系"><a href="#两个实体型之间的联系" class="headerlink" title="两个实体型之间的联系"></a>两个实体型之间的联系</h5><p>一对一、一对多、多对多</p>
<h5 id="两个以上实体型之间的联系"><a href="#两个以上实体型之间的联系" class="headerlink" title="两个以上实体型之间的联系"></a>两个以上实体型之间的联系</h5><p>一对一、一对多、多对多</p>
<h5 id="单个实体型内的联系"><a href="#单个实体型内的联系" class="headerlink" title="单个实体型内的联系"></a>单个实体型内的联系</h5><h4 id="E-R图画法"><a href="#E-R图画法" class="headerlink" title="E-R图画法"></a>E-R图画法</h4><p>实体型用矩阵，联系用菱形，属性用椭圆</p>
]]></content>
  </entry>
</search>
